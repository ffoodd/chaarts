@charset "UTF-8";
// ----------------------------- */
// Table of contents
// ----------------------------- */
//
//  == Paths
//  == Colors
//  == Timing functions
//  == Spacings
//  == Patterns
//  == Formage
//

// ==================== */
// == Paths
// ==================== */
@use "sass:math";

$path: "../" !default;

// ==================== */
// == Colors
// ==================== */
$colors: (
  dominant: (
    base: #444,
    light: mediumblue,
    dark: black,
    contrast: white
  ),
  secondary: (
    base: mediumblue,
    light: deepskyblue,
    dark: DarkBlue,
    contrast: white
  ),
  accent: (
    base: rebeccapurple,
    light: blueviolet,
    dark: indigo,
    contrast: white
  ),
  alert: (
    base: crimson,
    light: firebrick,
    dark: #911,
    contrast: white
  ),
  success: (
    base: springgreen,
    light: palegreen,
    dark: #01ac49,
    contrast: #444
  ),
  muted: (
    base: gray,
    light: darkgray,
    dark: #333,
    contrast: black
  ),
  default: (
    base: dimgray,
    light: lightgray,
    dark: darkgrey,
    secondary: whitesmoke,
    contrast: white
  ),
  charts: (
    purple: #734bf9,
    pink: #e11a81,
    blue: #0172f0,
    yellow: #fdc02f,
    green: #39ca74,
    red: #ff2d40,
    gray: #585462
  )
);

$blank: str-replace(to-string(palette( accent )), "#", "%23");
$blank-focus: str-replace(to-string(palette( accent, dark )), "#", "%23");

// ==================== */
// == Timing functions
//
// @note Simple cubic-bezier curves for timing functions
// @author David K. Piano
// @link https://twitter.com/DavidKPiano/status/965704092545900544
// ==================== */
$timing-functions: (
  enter: cubic-bezier(0, .5, .5, 1),
  exit: cubic-bezier(.5, 0, 1, .5),
  move: cubic-bezier(.5, 0, .5, 1)
);

// ==================== */
// == Spacings
// ==================== */
$full-width: false !default;
$base: math.div(1140, 16) !default;
$width: em( 1024 ) !default;
$gutter: rem( 16 ) !default;
$content-width: em( 600 ) !default;

// ==================== */
// == Patterns
//
// @note SVG inline patterns coming from:
// @link http://www.heropatterns.com/
// ==================== */
$patterns: (
  "checkers": "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8' viewBox='0 0 8 8'%3E%3Cg fill='%23ffffff99'%3E%3Cpath fill-rule='evenodd' d='M0 0h4v4H0V0zm4 4h4v4H4V4z'/%3E%3C/g%3E%3C/svg%3E",
  "hexagons": "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='14' height='24' viewBox='0 0 28 49'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23ffffff99' fill-rule='nonzero'%3E%3Cpath d='M13.99 9.25l13 7.5v15l-13 7.5L1 31.75v-15l12.99-7.5zM3 17.9v12.7l10.99 6.34 11-6.35V17.9l-11-6.34L3 17.9zM0 15l12.98-7.5V0h-2v6.35L0 12.69v2.3zm0 18.5L12.98 41v8h-2v-6.85L0 35.81v-2.3zM15 0v7.5L27.99 15H28v-2.31h-.01L17 6.35V0h-2zm0 49v-8l12.99-7.5H28v2.31h-.01L17 42.15V49h-2z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",
  "triangles": "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='16' viewBox='0 0 36 72'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23ffffff99'%3E%3Cpath d='M2 6h12L8 18 2 6zm18 36h12l-6 12-6-12z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",
  "zig": "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='20' height='12' viewBox='0 0 20 12'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23ffffff99'%3E%3Cpath d='M9.8 12L0 2.2V.8l10 10 10-10v1.4L10.2 12h-.4zm-4 0L0 6.2V4.8L7.2 12H5.8zm8.4 0L20 6.2V4.8L12.8 12h1.4zM9.8 0l.2.2.2-.2h-.4zm-4 0L10 4.2 14.2 0h-1.4L10 2.8 7.2 0H5.8z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",
  "stripes": "data:image/svg+xml,%3Csvg width='6' height='6' viewBox='0 0 6 6' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23ffffff99' fill-rule='evenodd'%3E%3Cpath d='M5 0h1L0 6V5zM6 5v1H5z'/%3E%3C/g%3E%3C/svg%3E",
  "dots": "data:image/svg+xml,%3Csvg width='10' height='10' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23ffffff99' fill-rule='evenodd'%3E%3Ccircle cx='3' cy='3' r='3'/%3E%3Ccircle cx='13' cy='13' r='3'/%3E%3C/g%3E%3C/svg%3E"
);
