@use "sass:map";
@use "sass:math";
@use "abstracts/variables";

/* ==================== */
/* == Radar Charts
/* ==================== */

.chaarts[class*="radar"] {
	--radius: #{variables.$width * 0.2};
	--unitless-radius: calc(1024 / 16 / 5);
	--size: calc(var(--radius) / var(--scale));
	--part: calc(360deg / var(--items));
	--integer: calc(var(--scale));
	background-image:
		repeating-radial-gradient(
			circle at 50%,
			var(--foreground-o-25) 0 2px,
			transparent 0 calc(var(--size) * var(--step))
		),
		repeating-radial-gradient(
			circle at 50%,
			var(--foreground-o-10) 0 2px,
			transparent 0 var(--size)
		);
	border: 2px solid;
	border-radius: 50%;
	contain: layout;
	counter-reset: scale var(--integer);
	block-size: calc(var(--radius) * 2);
	margin: variables.$gutter * 6 auto variables.$gutter * 12;
	overflow: visible;
	position: relative;
	inline-size: calc(var(--radius) * 2);

	caption {
		background: none;
		inset-block-end: variables.$gutter * -10;
		position: absolute;
	}

	/**
	 * Placing items around a circle based on:
	 * @link https://stackoverflow.com/questions/12813573/position-icons-into-circle
	 * @link http://dabblet.com/gist/3866686
	 * @author Ana Tudor
	 *
	 * @note Negative values for radius helps to start at the top left corner
	 */
	[scope="col"] {
		--away: calc((var(--radius) * -1) - 50%);
		background-color: transparent;
		inset-inline-start: 50%;
		margin: 0;
		padding: 0 variables.$gutter;
		position: absolute;
		inset-block-start: 50%;
		transform: translate3d(-50%, -50%, 0) rotate(calc(var(--part) * var(--index, 1))) translate(var(--away)) rotate(calc(var(--part) * var(--index, 1) * -1));
	}

	@each $number in 1, 2, 3, 4, 5, 6, 7 {
		tr > *:nth-of-type(#{$number}) {
			--index: #{$number};
		}
	}

	/**
	 * This is quite sophisticated, we're mixing multiple techniques
	 *
	 * @note Setting items as parts of the circle:
	 * @link https://tympanus.net/codrops/2013/08/09/building-a-circular-navigation-with-css-transforms/
	 * @author Sara Soueidan
	 *
	 * @note Because we skew items, clip-path() needs to take skew angle into account
	 * @note To do so, we need to know skewed width (which is hypothenuse of the resulting triangle)
	 * @note We only know two angles (skew one + square one) and a side (initial width),
	 * @note So we need to compute the sinus of the opposite angle to get hypothenuse
	 * @note Thanks god, sin() exists
	 */
	td {
		--skew: calc(90deg - var(--part));
		border-block-end: 1px solid var(--chaarts-purple);
		block-size: 50%;
		inset-inline-start: 0;
		margin: 0;
		position: absolute;
		inset-block-start: 0;
		transform: rotate(calc(var(--part) * var(--index, 1))) skew(var(--skew));
		transform-origin: 100% 100%;
		inline-size: 50%;

		@each $number in 1, 2, 3, 4, 5, 6, 7 {
			&:nth-of-type(#{$number}) span {
				--point: var(--#{$number});
				--pos: calc(100% - (var(--#{$number + 1}) * 100% / (var(--scale) * var(--ratio))));
			}
		}

		&::after,
		&::before {
			display: none;
		}
	}

	span {
		--opposite: calc(180 - (90 + (90 - (360 / var(--items)))));
		// get opposite angle in radians
		--angle: calc(var(--opposite) * 0.01745329251);
		--sin-angle: sin(var(--angle));
		// calc() hypothenuse
		--hypo: calc(var(--unitless-radius) / var(--sin-angle));
		// get the ratio: skewed / initial width
		--ratio: calc(var(--hypo) / var(--unitless-radius));
		--polygon: polygon(
				100% var(--pos),
				calc(100% - (var(--point) * 100% / var(--scale))) 100%,
				100% 100%
		);
		background: var(--chaarts-purple);
		clip-path: var(--polygon);
		filter: drop-shadow(0 0 variables.$gutter var(--chaarts-purple));
		block-size: 100%;
		position: absolute;
		inline-size: 100%;
	}
}

/**
 * 1.
 * @note Display CSS integers custom properties with a trick using counters
 * @author Cassie Evans
 * @link https://codepen.io/cassie-codes/pen/22ea69e0f681d45f2f4c2ca5e6acf4ab
 *
 * 2.
 * @note We need to ensure our counter uses an integer, --value might a a floating number
 * @author Carter Li
 * @link https://css-tricks.com/animating-number-counters/#the-new-school-css-solution
 */
.chaarts.radar [scope="col"] {
	&::after {
		color: var(--foreground-lighter);
		display: block;
		font-size: small;
		font-weight: 400;
	}

	@each $number in 1, 2, 3, 4, 5, 6, 7 {
		&:nth-child(#{$number})::after {
			--integer: calc(var(--#{$number})); // 2
			counter-reset: value var(--integer); // 1
			content: counter(value) "\A0/\A0" counter(scale); // 1
		}
	}
}

.chaarts.radar-multiple {
	margin-block-end: variables.$gutter * 12;

	tbody {
		columns: var(--areas);
		vertical-align: bottom;
	}

	[scope="row"] {
		inset-block-end: variables.$gutter * -8;
		block-size: variables.$gutter * 2;
		inset-inline-start: variables.$gutter;
		position: absolute;

		&::before {
			background: var(--color, currentColor);
			content: "";
			display: inline-block;
			block-size: variables.$gutter;
			margin-inline-end: variables.$gutter * 0.25;
			transform: translate3d(0, .1rem, 0);
			inline-size: variables.$gutter;
		}
	}

	// Allowing more areas :)
	@each $number in 1 {
		tr:nth-child(#{$number + 1}) [scope="row"] {
			inset-inline-start: calc(#{variables.$gutter} + (100% / var(--areas)) * #{$number});
		}
	}

	td {
		align-items: flex-end;
		border-color: var(--color, currentColor);
		display: flex;
		justify-content: flex-end;
		opacity: .5;
		pointer-events: none;
		z-index: 0;

		&::after {
			color: var(--foreground);
			display: block;
			font-size: small;
			font-weight: 700;
			text-indent: math.div(variables.$gutter, -2);
			transform: skew(calc(var(--skew) * -1)) rotate(calc(var(--part) * var(--index, 1) * -1));
			transform-origin: 0 0;
			inline-size: 100%;
			white-space: nowrap;
		}

		@each $number in 1, 2, 3, 4, 5, 6, 7 {
			&:nth-of-type(#{$number})::after {
				--integer: calc(var(--#{$number})); // 2
				counter-reset: value var(--integer); // 1
				content: counter(value); // 1
				inline-size: calc(var(--#{$number}) * 100% / var(--scale));
			}
		}
	}

	span {
		--mask: radial-gradient(circle at bottom right, var(--foreground), var(--foreground-o-50));
		background: var(--color, currentColor);
		mask-image: var(--mask);
		pointer-events: auto;
	}

	@media (hover: hover) {
		td {
			opacity: .25;
			transition: opacity .2s var(--move);

			&::after {
				opacity: 0;
				transition: inherit;
			}
		}

		tr:hover td {
			opacity: 1;
			z-index: 1;

			&::after {
				opacity: inherit;
			}
		}
	}
}
