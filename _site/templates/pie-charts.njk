{% extends "index.njk" %}

{% block meta %}
	<title>Pie charts — chaarts</title>
	<meta property="og:url" content="https://ffoodd.github.io/chaarts/pie-charts.html">
	<meta property="og:title" content="Pie charts — chaarts">
	<meta property="og:type" content="article">
	<meta property="og:description" name="description" content="Charts with HTML & CSS">
	<meta name="twitter:card" content="summary">
{% endblock %}

{% block navigation %}
	<ul class="fly-out">
		<li><a href="./index.html">Home</a></li>
		<li><a href="./bar-charts.html">Bar charts</a></li>
		<li><a href="./line-charts.html">Line charts</a></li>
		<li><a href="./column-charts.html">Column charts</a></li>
		<li><a aria-current="page">Pie charts</a></li>
		<li><a href="./radar-charts.html">Radar charts</a></li>
		<li>
			<a href="https://github.com/ffoodd/chaarts/" class="d-flex">
				<svg viewBox="0 0 16 16" height="24" width="24" role="img" aria-label="GitHub">
					<path fill-rule="evenodd"
								d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"></path>
				</svg>
			</a>
		</li>
	</ul>
{% endblock %}

{% block main %}
	<h1>Pie charts</h1>

	<p>
		The pie chart is used for <strong>representations of percentage proportions</strong>.
		It relies on CSS variables, an outrageous abuse of <code>calc()</code>,
		<code>display: table-*</code>, <code>clip-path</code>, <code>mask-image</code>,
		<code>transform</code> and a bit of <abbr title="Scalable Vectors Graphics">SVG</abbr>
		to distinguish each area. Yes, I know how to laugh. How do we use it?
	</p>

	<ol>
		<li>
			<strong>On each header</strong> <code>&lt;th&gt;</code>, a <var>--color</var>
			custom property allows you to assign, well… a color.
		</li>
		<li>
			<strong>Then each cell</strong> <code>&lt;td&gt;</code> must contain the value
			and its unit, as well as a <code>style</code> attribute to carry some variables:
			<ol>
				<li>
					<var>--value</var> is the percentage value,
					useful for determining <strong>the angle</strong> the element should occupy on the circle.
					All points of the <code>polygon()</code> —&nbsp;used to draw the pie part thanks to <code>clip-path</code>&nbsp;—
					depend on this value (read <a href="#calculation-twist">the technical note after
						the example for details of the calculations</a>).
				</li>
				<li>
					<var>--start</var> is used to define the <strong>starting point</strong>
					of the arc on the circle. It's the sum of the previous definitions, and is applied
					to the <code>rotate()</code> function of the <code>transform</code> poperty.
				</li>
				<li>
					And finally a series of <em>pseudo-boolean</em> variables, each worthing <var>0</var> or <var>1</var>
					—&nbsp;according to and idea of <a href="https://www.kizu.ru/conditions-for-css-variables/">
						<strong>Roman Komarov</strong> in <cite>Conditions for CSS variables</cite></a>&nbsp;—
					depend on the value: <var>--lt-25</var>, <var>--gt-25</var>, <var>--lt-50</var>…
					They allow to <strong>toggle the points</strong> from their original position
					(<code>50% 50%</code>) to their calculated position, by adding or subtracting from the initial value;
				</li>
			</ol>
		</li>
		<li>
			a <code>::before</code> <strong>pseudo-element</strong> on each cell <code>&lt;td&gt;</code>is formatted
			in a clever way according to all our variables, including <code>transform</code>,
			<code>clip-path</code> and <code>mask-image</code>.
			<ul>
				<li>
					Since <code>clip-path</code> still requires <a href="https://caniuse.com/#search=clip-path">
						a <code>-webkit-</code> vendor prefix for Safari</a> and <code>mask-image</code>
					<a href="https://caniuse.com/#search=mask-image">for WebKit based browsers</a>,
					we use a CSS custom property to <strong>to prevent duplicate (long) values for those properties</strong>
					—&nbsp;<a href="https://css-irl.info/7-uses-for-css-custom-properties/">trick
						shared by <strong>Michelle Barker</strong> in <cite>7 uses for CSS custom properties</cite></a>.
				</li>
			</ul>
		</li>
		<li>
			a <code>::after</code> <strong>pseudo-element</strong> is used as a tooltip, to summarize header and value for
			each cell
			—but the display of custom properties in a pseudo-element is not so trivial:
			<ul>
				<li>
					<code>content</code> only accepts strings, and our custom properties contains… number.
				</li>
				<li>
					Once again we recycle <a href="https://codepen.io/cassie-codes/pen/22ea69e0f681d45f2f4c2ca5e6acf4ab">
						a <strong>Cassie Evans</strong>'s trick based on <code>counter-reset</code> and its default value
						to <strong>convert</strong> our <var>--value</var> custom property into a string</a>.
				</li>
				<li>
					However <code>counter-reset</code> requires an integer, and we may have a floating number.
					We first need to make sure we're using an integer, so we rely on
					<a href="https://css-tricks.com/animating-number-counters/#the-new-school-css-solution"><strong>Carter Li</strong>'s
						ruse
						to use <code>calc()</code> to wrap our value—&nbsp;and <code>@property</code> for Chromium-based
						browsers</a>.
					Boum!
				</li>
			</ul>
		</li>
		<li>
			And finally <strong>a pattern</strong> is applied to the background,
			in order to better associate it visually with the corresponding legend.
		</li>
	</ol>

	{% import 'macros/_table-pie.njk' as table %}

	<div class="chaarts-container pie-container" role="group" aria-labelledby="caption-5">
		<div class="fieldset d-flex mbe-0 pi-1 sm-hidden no-js-hidden">
			<p class="label no-margin">
				<strong id="label-5">Switch</strong><br>
				<span id="description-5">Allows you to disable styles on the following table.</span>
			</p>
			<button type="button" class="mis-auto fw-400 no-border p-relative disable-css"
							role="switch" aria-checked="true"
							aria-labelledby="label-5" aria-describedby="description-5">
				<span>Funny</span>
				<span>Sober</span>
			</button>
		</div>

		<table class="chaarts pie" id="pie">
			<caption id="caption-5">
				Distribution of the weight of resources for
				<a href="https://www.ffoodd.fr" target="_blank" rel="noopener noreferrer">ffoodd.fr</a>
			</caption>
			<thead class="sr-only">
			<tr>
				<th scope="col">Resource</th>
				<th scope="col">Proportion</th>
			</tr>
			</thead>
			<tbody>
			{{ table.pie('HTML', '2', '%', '', '0', 'var(--chaarts-purple)') }}
			{{ table.pie('CSS', '2', '%', '', '2', 'var(--chaarts-pink)') }}
			{{ table.pie('JS', '32', '%', '', '4', 'var(--chaarts-blue)') }}
			{{ table.pie('Json', '1', '%', '', '36', 'var(--chaarts-yellow)') }}
			{{ table.pie('Images', '44', '%', '', '37', 'var(--chaarts-green)') }}
			{{ table.pie('Webfonts', '17', '%', '', '81', 'var(--chaarts-red)') }}
			{{ table.pie('Other', '2', '%', '', '98', 'var(--chaarts-gray)') }}
			</tbody>
		</table>
	</div>

	<details>
		<summary>A bit of trigonometry</summary>
		<div>
			<p>
				In this graph, each portion represents an arc of a circle based on an angle (part of 360 degrees).
				To define the shape of this portion, a point must be placed <strong>on the circle</strong>.
			</p>
			<p>
				To do this, I divide the circle into four squares. The position of the point on the circle
				can then be calculated using the properties of the right-angled triangle formed by:
			</p>
			<ol>
				<li>the center of the circle,</li>
				<li>the point we're trying to position,</li>
				<li>and the point perpendicular to the radius and passing through our target point.</li>
			</ol>
			<p>
				We know <strong>the hypotenuse</strong> of this triangle —&nbsp;the radius of the circle&nbsp;—,
				and <strong>the angle formed by the hypotenuse and starting from the center of the circle</strong>
				(reducing the value to 90 degrees, since the circle is divided into four square sectors:
				if the value is greater than 25: minus 90°, etc.)
				—&nbsp;plus a right angle, of course.
			</p>
			<h2>Law of sines</h2>
			<p>
				We can therefore <a href="https://en.wikipedia.org/wiki/Law_of_sines">use the sine law</a>
				to measure each side, and thus obtain the position of the point on the circle.
				Meaning we need to calculate the sine… Fortunately, CSS got you covered with the <code>sin()</code> function.
			</p>
			<p>
				All that remains is to use these dimensions to place the points of the polygon.
				<strong>It's child's play!</strong>
			</p>
		</div>
	</details>
	<details>
		<summary><abbr title="HyperText Markup Language" aria-label="HyperText Markup Language">HTML</abbr></summary>
		<div>{% include 'includes/_pie-markup.njk' %}</div>
	</details>
	<details>
		<summary><abbr title="Cascading StyleSheet" aria-label="Cascading StyleSheet">css</abbr></summary>
		<div>
			<pre class="scrollable-container"><code class="language-css">{% filter escape %}{% include 'css/examples/pie.css' %}{% endfilter %}</code></pre>
		</div>
	</details>
	<details id="calculation-twist">
		<summary>The calculation twist</summary>
		<h3>The positions of the polygon</h3>
		<p>
			The use of pseudo-Boolean variables makes this calculation pseudo-algorithmic.
			Let's start with an essential pre-requisite: the polygon being a closed shape and CSS
			not being magical, <strong>points must pre-exist</strong>.
			Spoiler, we need eleven points:
		</p>
		<ol>
			<li>
				<strong>The initial axis</strong>, from centre upwards: <code>50% 50%</code>
				and <code>50% 0%</code>.
			</li>
			<li>
				<strong>One point for each angle</strong> at the ends: the first one is fixed, at
				<code>100% 0%</code> (top right) —&nbsp;then each of the other angles has
				<strong>two states</strong>, reached or not reached. Some insights:
				<ul>
					<li>
						For example, the point at the bottom right concerns values between 25% and 50%:
						if the value is less than 25%, it must be in the centre (so as not to interfere
						with the drawing), and if not, it must be in its corner:
						<code>calc( 50% + ( var(--gt-25, 0) * 50% ) ) calc( 50% + ( var(--gt-25, 0) * 50% ) )</code><br>
						Thus the calculated value will be <code>50% 50%</code> if <var>--gt-25</var> is 0,
						and <code>100% 100%</code> if <var>--gt-25</var> is 1.
					</li>
					<li>
						In addition, each angle has its target coordinate:
						<code>100% 100%</code> for bottom right, <code>0% 100%</code> for bottom left,
						<code>0% 0%</code> for top left. It is therefore necessary <strong>to sometimes subtract
							and sometimes add</strong> to the initial value <code>50% 50%</code>
						to switch to the right point.
					</li>
				</ul>
			</li>
			<li>
				<strong>One point for each possible position per quarter circle</strong>, corresponding
				to each 25% slice. Like the points at the corners, these points must be in the centre
				if they are not used. That's where we laugh the most:
				<ul>
					<li>we start from <code>50%</code>, to which we add or subtract the following calculation;</li>
					<li>
						then <strong>the calculated position</strong> is used —&nbsp;<var>--pos-A</var>
						or <var>--pos-B</var> as the case may be&nbsp;— which is converted into percentages using
						<code>* 1%</code>, and rendered inert if the value is less than the range concerned
						using <var>* var(--lt-25, 1)</var>, for example.<br>
						<small>
							Notice the second value in <code>var()</code>?
							This is the default value if the variable is not defined. Cool, isn't it?
						</small>
					</li>
					<li>
						finally <strong>when the range is exceeded</strong>, the point switches to
						<code>0%</code> or <code>100%</code> as appropriate.
					</li>
				</ul>
			</li>
			<li>
				And lastly, we <strong>lose the path by going back to the centre</strong> of the circle,
				at <code>50% 50%</code>.
			</li>
		</ol>
		<p>That's it!</p>
		<h4>The positions illustrated</h4>
		<p>
			These screenshots —&nbsp;taken in
			<a href="https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Edit_CSS_shapes">the shape editor of
				the
				Firefox devtools</a>&nbsp;—
			show the points of the polygon in the different cases.
			You can see for each cited value the resolved polygon for <code>clip-path</code>
			—&nbsp;and see how the dynamic values tilt from one position to another.
		</p>
		<ul class="no-list">
			<li>
				<figure aria-label="Rendering example for 44%.">
					<figcaption class="no-padding h5">Rendering example for <var>44%</var></figcaption>
					<div class="grid-2">
						<figure aria-label="Shape screenshot for  44%." class="mbe-0 pbe-0">
							<img src="img/pie-1.jpg" alt="clip-path shape with a value of 44%: six visible points." width="264"
									 height="264">
							<figcaption>Shape screenshot for <var>44%</var>.</figcaption>
						</figure>
						<figure aria-label="Code generated for 44%." class="mbe-0 pbe-0">
							{% include 'includes/_pie-styles:44.njk' %}
							<figcaption>Code generated for <var>44%</var>.</figcaption>
						</figure>
					</div>
				</figure>
			</li>
			<li>
				<figure aria-label="Rendering example for 64%.">
					<figcaption class="no-padding h5">Rendering example for <var>64%</var></figcaption>
					<div class="grid-2">
						<figure aria-label="Shape screenshot for  64%." class="mbe-0 pbe-0">
							<img src="img/pie-2.jpg" alt="clip-path shape with a value of 64%: seven visible points." width="264"
									 height="264">
							<figcaption>Shape screenshot for <var>64%</var>.</figcaption>
						</figure>
						<figure aria-label="Code generated for 64%." class="mbe-0 pbe-0">
							{% include 'includes/_pie-styles:64.njk' %}
							<figcaption>Code generated for <var>64%</var>.</figcaption>
						</figure>
					</div>
				</figure>
			</li>
			<li>
				<figure aria-label="Rendering example for 88%.">
					<figcaption class="no-padding h5">Rendering example for <var>88%</var></figcaption>
					<div class="grid-2">
						<figure aria-label="Shape screenshot for  88%." class="mbe-0 pbe-0">
							<img src="img/pie-3.jpg" alt="clip-path shape with a value of 88%: nine visible points." width="264"
									 height="264">
							<figcaption>Shape screenshot for <var>88%</var>.</figcaption>
						</figure>
						<figure aria-label="Code generated for 88%." class="mbe-0 pbe-0">
							{% include 'includes/_pie-styles:88.njk' %}
							<figcaption>Code generated for <var>88%</var>.</figcaption>
						</figure>
					</div>
				</figure>
			</li>
		</ul>
	</details>

	<div class="grid-2">
		<div class="chaarts-container pie-container" role="group" aria-labelledby="caption-12">
			<div class="fieldset d-flex mbe-0 pi-1 sm-hidden no-js-hidden">
				<p class="label no-margin">
					<strong id="label-12">Switch</strong><br>
					<span id="description-12">Allows you to disable styles on the following table.</span>
				</p>
				<button type="button" class="mis-auto fw-400 no-border p-relative disable-css"
								role="switch" aria-checked="true"
								aria-labelledby="label-12" aria-describedby="description-12">
					<span>Funny</span>
					<span>Sober</span>
				</button>
			</div>

			<table class="chaarts pie">
				<caption id="caption-12">Pie chart example with a value between 50 and 75%</caption>
				<thead class="sr-only">
				<tr>
					<th scope="col">Resource</th>
					<th scope="col">Proportion</th>
				</tr>
				</thead>
				<tbody>
					{{ table.pie('HTML', '2', '%', '', '0', 'var(--chaarts-purple)') }}
					{{ table.pie('CSS', '2', '%', '', '2', 'var(--chaarts-pink)') }}
					{{ table.pie('JS', '32', '%', '', '4', 'var(--chaarts-blue)') }}
					{{ table.pie('Images', '64', '%', '', '36', 'var(--chaarts-green)') }}
				</tbody>
			</table>
		</div>

		<div class="chaarts-container pie-container" role="group" aria-labelledby="caption-13">
			<div class="fieldset d-flex mbe-0 pi-1 sm-hidden no-js-hidden">
				<p class="label no-margin">
					<strong id="label-13">Switch</strong><br>
					<span id="description-13">Allows you to disable styles on the following table.</span>
				</p>
				<button type="button" class="mis-auto fw-400 no-border p-relative disable-css"
								role="switch" aria-checked="true"
								aria-labelledby="label-13" aria-describedby="description-13">
					<span>Funny</span>
					<span>Sober</span>
				</button>
			</div>

			<table class="chaarts pie">
				<caption id="caption-13">Pie chart example with a value greater than 75%</caption>
				<thead class="sr-only">
				<tr>
					<th scope="col">Resource</th>
					<th scope="col">Proportion</th>
				</tr>
				</thead>
				<tbody>
				{{ table.pie('HTML', '2', '%', '', '0', 'var(--chaarts-purple)') }}
				{{ table.pie('CSS', '2', '%', '', '2', 'var(--chaarts-pink)') }}
				{{ table.pie('JS', '8', '%', '', '4', 'var(--chaarts-blue)') }}
				{{ table.pie('Images', '88', '%', '', '12', 'var(--chaarts-green)') }}
				</tbody>
			</table>
		</div>
	</div>

	<h2>Donut</h2>

	<p>
		On the <code>&lt;table&gt;</code> element, we add an <var>--offset</var> variable
		that allows us to determine the size of the hole of the donut,
		generated using <code>mask-image</code> and <code>radial-gradient()</code>.
		<a href="https://codepen.io/thebabydino/pens/tags/?selected_tag=mask"><strong>Ana Tudor</strong> has made
			many examples of using <code>mask-*</code> on CodePen</a>, have a look!
	</p>

	<div class="chaarts-container pie-container" role="group" aria-labelledby="caption-6">
		<div class="fieldset d-flex mbe-0 pi-1 sm-hidden no-js-hidden">
			<p class="label no-margin">
				<strong id="label-6">Switch</strong><br>
				<span id="description-6">Allows you to disable styles on the following table.</span>
			</p>
			<button type="button" class="mis-auto fw-400 no-border p-relative disable-css"
							role="switch" aria-checked="true"
							aria-labelledby="label-6" aria-describedby="description-6">
				<span>Funny</span>
				<span>Sober</span>
			</button>
		</div>

		<table class="chaarts pie donut" id="donut" style="--offset: 8rem;">
			<caption id="caption-6">
				Distribution of the weight of resources for
				<a href="https://www.ffoodd.fr" target="_blank" rel="noopener noreferrer">ffoodd.fr</a>
			</caption>
			<thead class="sr-only">
			<tr>
				<th scope="col">Resource</th>
				<th scope="col">Proportion</th>
			</tr>
			</thead>
			<tbody>
			{{ table.pie('HTML', '2', '%', '', '0', 'var(--chaarts-purple)') }}
			{{ table.pie('CSS', '2', '%', '', '2', 'var(--chaarts-pink)') }}
			{{ table.pie('JS', '32', '%', '', '4', 'var(--chaarts-blue)') }}
			{{ table.pie('Json', '1', '%', '', '36', 'var(--chaarts-yellow)') }}
			{{ table.pie('Images', '44', '%', '', '37', 'var(--chaarts-green)') }}
			{{ table.pie('Webfonts', '17', '%', '', '81', 'var(--chaarts-red)') }}
			{{ table.pie('Other', '2', '%', '', '98', 'var(--chaarts-gray)') }}
			</tbody>
		</table>
	</div>

	<details>
		<summary><abbr title="Cascading StyleSheet" aria-label="Cascading StyleSheet">css</abbr></summary>
		<div>
			<pre class="scrollable-container"><code class="language-css">{% filter escape %}{% include 'css/examples/donut.css' %}{% endfilter %}</code></pre>
		</div>
	</details>

	<div class="note">
		<h3>Conical gradient</h3>
		<p>
			The use of <code>conic-gradient()</code> is promising for this case.
			You'll find examples made by <strong>Ana Tudor</strong> and <strong>Léa Verou</strong>
			—&nbsp;who actually wrote the specification, and designed
			<a href="https://leaverou.github.io/conic-gradient/">a polyfill</a>.
			However, <a href="https://caniuse.com/#search=conic-gradient">current support is limited to WebKit based
				browsers</a>
			is depressing, and still raises some <strong>accessibility issues</strong>
			since you can't assign a pattern to each color of the <code>conic-gradient()</code>.
		</p>
	</div>

	<h2>Polar chart</h2>

	<p>
		For this variant, wa change almost nothing: only the <var>--zoom</var> variable
		and its implication in <strong>the scaling</strong> of portions using <code>scale()</code>.
	</p>

	<div class="chaarts-container pie-container" role="group" aria-labelledby="caption-10">
		<div class="fieldset d-flex mbe-0 pi-1 sm-hidden no-js-hidden">
			<p class="label no-margin">
				<strong id="label-10">Switch</strong><br>
				<span id="description-10">Allows you to disable styles on the following table.</span>
			</p>
			<button type="button" class="mis-auto fw-400 no-border p-relative disable-css"
							role="switch" aria-checked="true"
							aria-labelledby="label-10" aria-describedby="description-10">
				<span>Funny</span>
				<span>Sober</span>
			</button>
		</div>

		<table class="chaarts pie polar" id="polar">
			<caption id="caption-10">
				Distribution of the weight of resources for
				<a href="https://www.ffoodd.fr" target="_blank" rel="noopener noreferrer">ffoodd.fr</a>
			</caption>
			<thead class="sr-only">
			<tr>
				<th scope="col">Resource</th>
				<th scope="col">Proportion</th>
			</tr>
			</thead>
			<tbody>
			{{ table.pie('HTML', '2', '%', '', '0', 'var(--chaarts-purple)') }}
			{{ table.pie('CSS', '2', '%', '', '2', 'var(--chaarts-pink)') }}
			{{ table.pie('JS', '32', '%', '', '4', 'var(--chaarts-blue)') }}
			{{ table.pie('Json', '1', '%', '', '36', 'var(--chaarts-yellow)') }}
			{{ table.pie('Images', '44', '%', '', '37', 'var(--chaarts-green)') }}
			{{ table.pie('Webfonts', '17', '%', '', '81', 'var(--chaarts-red)') }}
			{{ table.pie('Other', '2', '%', '', '98', 'var(--chaarts-gray)') }}
			</tbody>
		</table>
	</div>

	<details>
		<summary><abbr title="Cascading StyleSheet" aria-label="Cascading StyleSheet">css</abbr></summary>
		<div>
			<pre class="scrollable-container"><code class="language-css">{% filter escape %}{% include 'css/examples/polar.css' %}{% endfilter %}</code></pre>
		</div>
	</details>
{% endblock %}
